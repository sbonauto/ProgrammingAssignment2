
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.78 (8075) x86_64-apple-darwin17.0]

[History restored from /Users/sydney/.Rapp.history]

> ## this code contains functions: makeCacheMatrix and 
> ##cacheSolve
> ##makeCacheMatrix includes set, get, setinverse, getinverse
> 
> makeCacheMatrix <- function(x = matrix()) {
+   inv <- NULL               
+ ##inverse initialized as null
+   set <- function(y) {
+     x <<- y
+     inv <<- NULL
+   }
+   get <- function() x     ## gets matrix x
+   setinverse <- function(inverse) inv <<- inverse
+   getinverse <- function() inv    ##obtains inverse
+   list(set = set, get = get,
+        setinverse = setinverse,
+        getinverse = getinverse)
+ }
> 
> ##this is used to get the cache data
> 
> cacheSolve <- function(x, ...) {. 
+ ##gets cache data
+   inv <- x$getinverse()
+   if(!is.null(inv)) {				
+ ##checks if inverse is null
+     message("getting cached data")
+     return(inv)					
+ ##returns inverse value
+   }
+   matrix_to_invert <- x$get()
+   inv <- solve(matrix_to_invert, ...)   
+ ##calculates inverse value
+   x$setinverse(inv)
+   inv
+ }
> 